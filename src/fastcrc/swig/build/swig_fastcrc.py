# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_swig_fastcrc')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_swig_fastcrc')
    _swig_fastcrc = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_swig_fastcrc', [dirname(__file__)])
        except ImportError:
            import _swig_fastcrc
            return _swig_fastcrc
        try:
            _mod = imp.load_module('_swig_fastcrc', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _swig_fastcrc = swig_import_helper()
    del swig_import_helper
else:
    import _swig_fastcrc
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

##================================================##

def new_Uint8Array(nelements):
    return _swig_fastcrc.new_Uint8Array(nelements)
new_Uint8Array = _swig_fastcrc.new_Uint8Array

def delete_Uint8Array(ary):
    return _swig_fastcrc.delete_Uint8Array(ary)
delete_Uint8Array = _swig_fastcrc.delete_Uint8Array

def Uint8Array_getitem(ary, index):
    return _swig_fastcrc.Uint8Array_getitem(ary, index)
Uint8Array_getitem = _swig_fastcrc.Uint8Array_getitem

def Uint8Array_setitem(ary, index, value):
    return _swig_fastcrc.Uint8Array_setitem(ary, index, value)
Uint8Array_setitem = _swig_fastcrc.Uint8Array_setitem
class CRC8ResultPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRC8ResultPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRC8ResultPtr, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _swig_fastcrc.new_CRC8ResultPtr()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_CRC8ResultPtr
    __del__ = lambda self: None

    def assign(self, value):
        return _swig_fastcrc.CRC8ResultPtr_assign(self, value)

    def value(self):
        return _swig_fastcrc.CRC8ResultPtr_value(self)

    def cast(self):
        return _swig_fastcrc.CRC8ResultPtr_cast(self)
    if _newclass:
        frompointer = staticmethod(_swig_fastcrc.CRC8ResultPtr_frompointer)
    else:
        frompointer = _swig_fastcrc.CRC8ResultPtr_frompointer
CRC8ResultPtr_swigregister = _swig_fastcrc.CRC8ResultPtr_swigregister
CRC8ResultPtr_swigregister(CRC8ResultPtr)

def CRC8ResultPtr_frompointer(t):
    return _swig_fastcrc.CRC8ResultPtr_frompointer(t)
CRC8ResultPtr_frompointer = _swig_fastcrc.CRC8ResultPtr_frompointer

class CRC8Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRC8Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRC8Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reginit"] = _swig_fastcrc.CRC8Result_reginit_set
    __swig_getmethods__["reginit"] = _swig_fastcrc.CRC8Result_reginit_get
    if _newclass:
        reginit = _swig_property(_swig_fastcrc.CRC8Result_reginit_get, _swig_fastcrc.CRC8Result_reginit_set)
    __swig_setmethods__["xorout"] = _swig_fastcrc.CRC8Result_xorout_set
    __swig_getmethods__["xorout"] = _swig_fastcrc.CRC8Result_xorout_get
    if _newclass:
        xorout = _swig_property(_swig_fastcrc.CRC8Result_xorout_get, _swig_fastcrc.CRC8Result_xorout_set)

    def __init__(self):
        this = _swig_fastcrc.new_CRC8Result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_CRC8Result
    __del__ = lambda self: None
CRC8Result_swigregister = _swig_fastcrc.CRC8Result_swigregister
CRC8Result_swigregister(CRC8Result)

class CRC8ResultArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRC8ResultArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRC8ResultArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _swig_fastcrc.CRC8ResultArray_size_set
    __swig_getmethods__["size"] = _swig_fastcrc.CRC8ResultArray_size_get
    if _newclass:
        size = _swig_property(_swig_fastcrc.CRC8ResultArray_size_get, _swig_fastcrc.CRC8ResultArray_size_set)
    __swig_setmethods__["capacity"] = _swig_fastcrc.CRC8ResultArray_capacity_set
    __swig_getmethods__["capacity"] = _swig_fastcrc.CRC8ResultArray_capacity_get
    if _newclass:
        capacity = _swig_property(_swig_fastcrc.CRC8ResultArray_capacity_get, _swig_fastcrc.CRC8ResultArray_capacity_set)
    __swig_setmethods__["data"] = _swig_fastcrc.CRC8ResultArray_data_set
    __swig_getmethods__["data"] = _swig_fastcrc.CRC8ResultArray_data_get
    if _newclass:
        data = _swig_property(_swig_fastcrc.CRC8ResultArray_data_get, _swig_fastcrc.CRC8ResultArray_data_set)

    def __init__(self):
        this = _swig_fastcrc.new_CRC8ResultArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_CRC8ResultArray
    __del__ = lambda self: None
CRC8ResultArray_swigregister = _swig_fastcrc.CRC8ResultArray_swigregister
CRC8ResultArray_swigregister(CRC8ResultArray)


def CRC8ResultArray_getptr(array, index):
    return _swig_fastcrc.CRC8ResultArray_getptr(array, index)
CRC8ResultArray_getptr = _swig_fastcrc.CRC8ResultArray_getptr

def CRC8ResultArray_free(array):
    return _swig_fastcrc.CRC8ResultArray_free(array)
CRC8ResultArray_free = _swig_fastcrc.CRC8ResultArray_free

def hw_crc8_calculate(data_buffer, data_size, polynomial, init_reg, xor_val):
    return _swig_fastcrc.hw_crc8_calculate(data_buffer, data_size, polynomial, init_reg, xor_val)
hw_crc8_calculate = _swig_fastcrc.hw_crc8_calculate

def hw_crc8_calculate_param(data_buffer, data_size, polynomial, init_reg, xor_val, reverse_order_flag, reflect_bits_flag):
    return _swig_fastcrc.hw_crc8_calculate_param(data_buffer, data_size, polynomial, init_reg, xor_val, reverse_order_flag, reflect_bits_flag)
hw_crc8_calculate_param = _swig_fastcrc.hw_crc8_calculate_param

def hw_crc8_calculate_range(data_buffer, data_size, data_crc, polynomial, init_start, init_end, xor_start, xor_end):
    return _swig_fastcrc.hw_crc8_calculate_range(data_buffer, data_size, data_crc, polynomial, init_start, init_end, xor_start, xor_end)
hw_crc8_calculate_range = _swig_fastcrc.hw_crc8_calculate_range
class CRC16Result(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRC16Result, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRC16Result, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reginit"] = _swig_fastcrc.CRC16Result_reginit_set
    __swig_getmethods__["reginit"] = _swig_fastcrc.CRC16Result_reginit_get
    if _newclass:
        reginit = _swig_property(_swig_fastcrc.CRC16Result_reginit_get, _swig_fastcrc.CRC16Result_reginit_set)
    __swig_setmethods__["xorout"] = _swig_fastcrc.CRC16Result_xorout_set
    __swig_getmethods__["xorout"] = _swig_fastcrc.CRC16Result_xorout_get
    if _newclass:
        xorout = _swig_property(_swig_fastcrc.CRC16Result_xorout_get, _swig_fastcrc.CRC16Result_xorout_set)

    def __init__(self):
        this = _swig_fastcrc.new_CRC16Result()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_CRC16Result
    __del__ = lambda self: None
CRC16Result_swigregister = _swig_fastcrc.CRC16Result_swigregister
CRC16Result_swigregister(CRC16Result)

class CRC16ResultArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRC16ResultArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRC16ResultArray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _swig_fastcrc.CRC16ResultArray_size_set
    __swig_getmethods__["size"] = _swig_fastcrc.CRC16ResultArray_size_get
    if _newclass:
        size = _swig_property(_swig_fastcrc.CRC16ResultArray_size_get, _swig_fastcrc.CRC16ResultArray_size_set)
    __swig_setmethods__["capacity"] = _swig_fastcrc.CRC16ResultArray_capacity_set
    __swig_getmethods__["capacity"] = _swig_fastcrc.CRC16ResultArray_capacity_get
    if _newclass:
        capacity = _swig_property(_swig_fastcrc.CRC16ResultArray_capacity_get, _swig_fastcrc.CRC16ResultArray_capacity_set)
    __swig_setmethods__["data"] = _swig_fastcrc.CRC16ResultArray_data_set
    __swig_getmethods__["data"] = _swig_fastcrc.CRC16ResultArray_data_get
    if _newclass:
        data = _swig_property(_swig_fastcrc.CRC16ResultArray_data_get, _swig_fastcrc.CRC16ResultArray_data_set)

    def __init__(self):
        this = _swig_fastcrc.new_CRC16ResultArray()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_CRC16ResultArray
    __del__ = lambda self: None
CRC16ResultArray_swigregister = _swig_fastcrc.CRC16ResultArray_swigregister
CRC16ResultArray_swigregister(CRC16ResultArray)


def CRC16ResultArray_getptr(array, index):
    return _swig_fastcrc.CRC16ResultArray_getptr(array, index)
CRC16ResultArray_getptr = _swig_fastcrc.CRC16ResultArray_getptr

def CRC16ResultArray_free(array):
    return _swig_fastcrc.CRC16ResultArray_free(array)
CRC16ResultArray_free = _swig_fastcrc.CRC16ResultArray_free

def hw_crc16_calculate(data_buffer, data_size, polynomial, init_reg, xor_val):
    return _swig_fastcrc.hw_crc16_calculate(data_buffer, data_size, polynomial, init_reg, xor_val)
hw_crc16_calculate = _swig_fastcrc.hw_crc16_calculate

def hw_crc16_calculate_param(data_buffer, data_size, polynomial, init_reg, xor_val, reverse_order_flag, reflect_bits_flag):
    return _swig_fastcrc.hw_crc16_calculate_param(data_buffer, data_size, polynomial, init_reg, xor_val, reverse_order_flag, reflect_bits_flag)
hw_crc16_calculate_param = _swig_fastcrc.hw_crc16_calculate_param

def hw_crc16_calculate_range(data_buffer, data_size, data_crc, polynomial, init_start, init_end, xor_start, xor_end):
    return _swig_fastcrc.hw_crc16_calculate_range(data_buffer, data_size, data_crc, polynomial, init_start, init_end, xor_start, xor_end)
hw_crc16_calculate_range = _swig_fastcrc.hw_crc16_calculate_range
class uint16_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint16_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint16_array, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _swig_fastcrc.uint16_array_size_set
    __swig_getmethods__["size"] = _swig_fastcrc.uint16_array_size_get
    if _newclass:
        size = _swig_property(_swig_fastcrc.uint16_array_size_get, _swig_fastcrc.uint16_array_size_set)
    __swig_setmethods__["capacity"] = _swig_fastcrc.uint16_array_capacity_set
    __swig_getmethods__["capacity"] = _swig_fastcrc.uint16_array_capacity_get
    if _newclass:
        capacity = _swig_property(_swig_fastcrc.uint16_array_capacity_get, _swig_fastcrc.uint16_array_capacity_set)
    __swig_setmethods__["data"] = _swig_fastcrc.uint16_array_data_set
    __swig_getmethods__["data"] = _swig_fastcrc.uint16_array_data_get
    if _newclass:
        data = _swig_property(_swig_fastcrc.uint16_array_data_get, _swig_fastcrc.uint16_array_data_set)

    def __init__(self):
        this = _swig_fastcrc.new_uint16_array()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _swig_fastcrc.delete_uint16_array
    __del__ = lambda self: None
uint16_array_swigregister = _swig_fastcrc.uint16_array_swigregister
uint16_array_swigregister(uint16_array)


def uint16_array_getvalue(array, index):
    return _swig_fastcrc.uint16_array_getvalue(array, index)
uint16_array_getvalue = _swig_fastcrc.uint16_array_getvalue

def uint16_array_free(array):
    return _swig_fastcrc.uint16_array_free(array)
uint16_array_free = _swig_fastcrc.uint16_array_free

def hw_crc16_invert(data_buffer, data_size, polynomial, reg):
    return _swig_fastcrc.hw_crc16_invert(data_buffer, data_size, polynomial, reg)
hw_crc16_invert = _swig_fastcrc.hw_crc16_invert

def hw_crc16_invert_range(data_buffer, data_size, crc_num, polynomial, xor_start, xor_end):
    return _swig_fastcrc.hw_crc16_invert_range(data_buffer, data_size, crc_num, polynomial, xor_start, xor_end)
hw_crc16_invert_range = _swig_fastcrc.hw_crc16_invert_range
# This file is compatible with both classic and new-style classes.


